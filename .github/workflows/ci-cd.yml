# GitHub Actions workflow for gitlab-pipeline-analyzer
# This workflow builds, tests, and publishes the package to PyPI

name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

permissions:
  contents: write    # Required for creating releases
  id-token: write    # Required for PyPI trusted publishing
  packages: write    # Required for package publishing
  pull-requests: read # Required for PR workflows

env:
  PYTHON_VERSION: "3.12"

jobs:
  test:
    name: Test and Quality Checks
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install uv
      uses: astral-sh/setup-uv@v3

    - name: Install dependencies
      run: uv sync --all-extras

    - name: Run code quality checks
      run: |
        echo "üîç Running code quality checks..."
        uv run ruff check
        uv run ruff format --check

    - name: Run type checking
      run: |
        echo "üîç Running type checks..."
        uv run mypy src/

    - name: Run security checks
      run: |
        echo "üîç Running security checks..."
        uv run bandit -r src/

    - name: Run tests with coverage
      run: |
        echo "üß™ Running tests..."
        uv run pytest --tb=short --cov-report=xml --cov-report=term

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install uv
      uses: astral-sh/setup-uv@v3

    - name: Install dependencies
      run: uv sync --all-extras

    - name: Build package
      run: |
        echo "üì¶ Building package..."
        uv run python -m build

    - name: Check package
      run: |
        echo "‚úÖ Checking package integrity..."
        uv run twine check dist/*
        ls -la dist/

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/
        retention-days: 7

  publish-testpypi:
    name: Publish to TestPyPI
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: testpypi
      url: https://test.pypi.org/project/gitlab-pipeline-analyzer/

    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v5
      with:
        name: dist
        path: dist/

    - name: Publish to TestPyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        repository-url: https://test.pypi.org/legacy/
        password: ${{ secrets.TESTPYPI_API_TOKEN }}

  publish-pypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')
    environment:
      name: pypi
      url: https://pypi.org/project/gitlab-pipeline-analyzer/

    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v5
      with:
        name: dist
        path: dist/

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: publish-pypi
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ github.ref_name }}
        name: Release ${{ github.ref_name }}
        body: |
          ## Changes in ${{ github.ref_name }}

          See [CHANGELOG.md](CHANGELOG.md) for detailed changes.

          ## Installation
          ```bash
          pip install gitlab-pipeline-analyzer
          ```

          ## Links
          - üì¶ [PyPI Package](https://pypi.org/project/gitlab-pipeline-analyzer/)
          - üìö [Documentation](README.md)
        draft: false
        prerelease: ${{ contains(github.ref_name, 'alpha') || contains(github.ref_name, 'beta') || contains(github.ref_name, 'rc') }}
        generate_release_notes: true
